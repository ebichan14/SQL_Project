-- Bike store Relational Data Analyze --
use bikestore_relational;

# Tables from bikestore_relational data

select * from brands;
select * from categories;
select * from customers;
select * from order_items;
select * from orders;
select * from products;
select * from staffs;
select * from stocks;
select * from stores;

-- 1. write a query to get products by the brands list which is available in the brand id --
-- here i am using inner join function to get a common data --

select distinct p.brand_id, p.product_id, p.product_name, p.model_year, p.list_price
from products as p
inner join brands as b
on p.brand_id = b.brand_id
order by p.brand_id;

-- 2. wirte a query to display the customer orders  bikes --

select c.customer_id, c.first_name, c.last_name, count(o.order_status) as order_count, o.store_id  
from customers as c 
join orders as o 
on c.customer_id = o.customer_id
group by c.customer_id, c.first_name, c.last_name,o.store_id 
order by c.customer_id;

-- 3. write a query to display the top selling products --

select p.product_id, p.product_name, sum(oi.quantity) as total_quantity
from order_items as oi
join products as p 
on oi.product_id = p.product_id
group by p.product_name, p.product_id
order by total_quantity desc
limit 10;

-- 4. write a query to get the total revenue generated by the bikestore --

select p.product_id, p.product_name, round(sum(oi.quantity * oi.list_price)) as total_revenue
from order_items as oi
join products as p 
on oi.product_id = p.product_id
group by p.product_id, p.product_name
order by total_revenue desc;

-- 5. write a query calculate customer metrics --

select orders.customer_id, count(distinct orders.order_id) as total_orders,
round(sum(order_items.quantity * order_items.list_price),2) as total_spent,
count(distinct date(orders.order_date)) as days_active
from orders
join order_items on orders.order_id = order_items.order_id
group by orders.customer_id
limit 1000;

-- 6. staff performance analysis --

select o.staff_id, o.store_id, concat(s.first_name,' ', s.last_name)as full_name,
count(distinct o.order_id) as total_orders, round(sum(oi.quantity * oi.list_price),2) as total_revenue
from staffs as s
join orders as o on s.staff_id = o.staff_id
join order_items as oi on o.order_id = oi.order_id
group by o.staff_id, o.store_id, s.first_name, s.last_name;

-- 7. inventory management analysis --

select stk.store_id, count(stk.product_id)as products_count, str.store_name, str.state
from stocks as stk
join stores as str
on stk.store_id = str.store_id
group by stk.store_id, str.store_name, str.state;

-- 8. Write a query to get a 'Santa cruz bikes' store sales report --

select stk.store_id, stk.store_name, stk.city, stk.state, sum(ot.list_price * ot.quantity / ot.discount)as total_sales
from stores as stk
join orders as o on stk.store_id = o.store_id
join order_items as ot on o.order_id = ot.order_id
where stk.store_name = 'Santa Cruz Bikes'
group by stk.store_id, stk.store_name, stk.city, stk.state;

select stk.store_id, stk.store_name, stk.city, stk.state, sum(ot.list_price * ot.quantity / ot.discount)as total_sales
from stores as stk
join orders as o on stk.store_id = o.store_id
join order_items as ot on o.order_id = ot.order_id
where stk.store_name = 'Baldwin Bikes'
group by stk.store_id, stk.store_name, stk.city, stk.state;

-- 9. write a query to get the top sells brand --

select b.brand_id, 
	b.brand_name, 
	round(sum(ot.list_price * ot.quantity / ot.discount),2) as total_revenue
from brands as b
join products as p on b.brand_id = p.brand_id
join order_items as ot on ot.product_id= p.product_id
group by b.brand_id, b.brand_name
having total_revenue > 150000
order by total_revenue desc ; # top revenue

-- 10. sales trends on a monthly basis --

select year(order_date) as year, month(order_date) as month, 
    round(sum(quantity * list_price * (1 - discount)),2) as total_sales
from orders as o
join order_items as ot on o.order_id = ot.order_id
group by year(order_date), month(order_date)
order by year, month 
limit 1000 ;

-- 11. geographic distribution of customers by city --

select city, state, count(*) as total_customers
from customers
group by city, state
order by total_customers desc;

-- 12. write a query to identify whether the revenue has crossed 100000 using the if clause on the list_price table --
 select sum(quantity * list_price / 1-discount) as price ,if(sum(quantity * list_price / 1-discount) > 10000, 'Yes', 'No') as revenue_crossed
 from order_items;
 
 -- 13. create a view in sql --
 
 create  view brand_revenue as
 select b.brand_id, 
	b.brand_name, 
	round(sum(ot.list_price * ot.quantity / ot.discount),2) as total_revenue
from brands as b
join products as p on b.brand_id = p.brand_id
join order_items as ot on ot.product_id= p.product_id
group by b.brand_id, b.brand_name
having total_revenue > 150000
order by total_revenue desc ; 

select * from brand_revenue;
-- drop views --
drop view bikestore_revenue;

-- 14.write a query to get a 'Children Bicycles' sales --

select c.category_id, c.category_name, p.product_name, p.list_price
from categories as c
join products as p on c.category_id = p.category_id
where c.category_name = 'Children Bicycles'
group by c.category_id, c.category_name, p.product_name, p.list_price;

-- 15. write a aggretated function, joins, groupby, having clause, order by --

select
    ot.order_id, ot.product_id, p.product_name, p.model_year,
   avg(ot.quantity * ot.list_price * (1 - ot.discount)) as avg_revenue
from bikestore_relational.order_items as ot
join bikestore_relational.products as p on ot.product_id = p.product_id
where p.model_year = 2016 or p.model_year = 2018
group by ot.order_id, ot.product_id, p.product_name, p.model_year
HAVING avg_revenue > 10000
ORDER BY ot.order_id, ot.product_id, p.product_name, p.model_year, avg_revenue
LIMIT 1000;

-- Stored procedures --
select * from stocks;

DELIMITER //

create function getstore_availablity() returns varchar(100)
deterministic
BEGIN
	declare store_count int;
    declare result varchar(100);
    select count(*) into store_count from stores 
    where store_id > 3;
    if store_count > 0 then
		set result =  'Stores are available';
	else
		set result = 'Stores are not available';
	end if;
    
    return result;
end //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE customers (IN cityname VARCHAR(50))
BEGIN
    SELECT * FROM customer
    WHERE city = cityname;
END //
DELIMITER ;

call customers('alaska'); # here I'm getting error becaues alaska name is not inside the customer table

# Triggers
DELIMITER //

create trigger additional_brands_name
before insert on brands
for each row
begin
	if new.brand_name is null then 
		set new.brand_name = 'Yamaha' ;
	end if;
end;
//
DELIMITER ;

update brands
set brand_name = 'Yamaha'
where brand_id = 10;

insert into brands values
(10, null);
select * from brands;





